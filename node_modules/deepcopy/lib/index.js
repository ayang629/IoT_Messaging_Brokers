'use strict';

exports.__esModule = true;

var _copy = require('./copy');

var _polyfill = require('./polyfill');

function defaultCustomizer(target) {
  return void 0;
}

function deepcopy(target) {
  var customizer = arguments.length <= 1 || arguments[1] === undefined ? defaultCustomizer : arguments[1];

  if (target === null) {
    // copy null
    return null;
  }

  var resultValue = _copy.copyValue(target);

  if (resultValue !== null) {
    // copy some primitive types
    return resultValue;
  }

  var resultCollection = _copy.copyCollection(target, customizer),
      clone = resultCollection !== null ? resultCollection : target;

  var visited = [target],
      reference = [clone];

  // recursively copy from collection
  return recursiveCopy(target, customizer, clone, visited, reference);
}

function recursiveCopy(target, customizer, clone, visited, reference) {
  if (target === null) {
    // copy null
    return null;
  }

  var resultValue = _copy.copyValue(target);

  if (resultValue !== null) {
    // copy some primitive types
    return resultValue;
  }

  var keys = _polyfill.getKeys(target).concat(_polyfill.getSymbols(target));

  var i = undefined,
      len = undefined;

  var key = undefined,
      value = undefined,
      index = undefined,
      resultCopy = undefined,
      result = undefined,
      ref = undefined;

  for (i = 0, len = keys.length; i < len; ++i) {
    key = keys[i];
    value = target[key];
    index = _polyfill.indexOf(visited, value);

    if (index === -1) {
      resultCopy = _copy.copy(value, customizer);
      result = resultCopy !== null ? resultCopy : value;

      if (value !== null && /^(?:function|object)$/.test(typeof value)) {
        visited.push(value);
        reference.push(result);
      }
    } else {
      // circular reference
      ref = reference[index];
    }

    clone[key] = ref || recursiveCopy(value, customizer, result, visited, reference);
  }

  return clone;
}

exports['default'] = deepcopy;
module.exports = exports['default'];